extends layout
block content
    div#Menu
      div#create
        input(type='text',name='room',placeholder='Roomname',id='rname')
        input(type="text",name='password',placeholder='Room Password',id='rpass')
        input(type="submit",value='create',onclick='addroom()')
      div#list
      div#enter
        input(type='text',name='uroom',placeholder='Roomname',id='uname')
        input(type="text",name='upassword',placeholder='Room Password',id='upass')
        input(type="submit",value='Enter',onclick='EnterRoom()')
    div#warning
    div#Board
       -var n=1
       while n<16
        div.square(id="1|"+n,ondrop='drop(event)',ondragover='allowdrop(event)',onclick='add(this)')
        div.square(id='2|'+n,ondrop='drop(event)',ondragover='allowdrop(event)',onclick='add(this)')
        div.square(id="3|"+n,ondrop='drop(event)',ondragover='allowdrop(event)',onclick='add(this)')
        div.square(id="4|"+n,ondrop='drop(event)',ondragover='allowdrop(event)',onclick='add(this)')
        div.square(id="5|"+n,ondrop='drop(event)',ondragover='allowdrop(event)',onclick='add(this)')
        div.square(id="6|"+n,ondrop='drop(event)',ondragover='allowdrop(event)',onclick='add(this)')
        div.square(id="7|"+n,ondrop='drop(event)',ondragover='allowdrop(event)',onclick='add(this)')
        div.square(id="8|"+n,ondrop='drop(event)',ondragover='allowdrop(event)',onclick='add(this)') 
        div.square(id="8|"+n,ondrop='drop(event)',ondragover='allowdrop(event)',onclick='add(this)') 
        div.square(id="9|"+n,ondrop='drop(event)',ondragover='allowdrop(event)',onclick='add(this)')
        div.square(id="10|"+n,ondrop='drop(event)',ondragover='allowdrop(event)',onclick='add(this)')
        div.square(id="11|"+n,ondrop='drop(event)',ondragover='allowdrop(event)',onclick='add(this)')
        div.square(id="12|"+n,ondrop='drop(event)',ondragover='allowdrop(event)',onclick='add(this)')
        div.square(id="13|"+n,ondrop='drop(event)',ondragover='allowdrop(event)',onclick='add(this)')
        div.square(id="14|"+n,ondrop='drop(event)',ondragover='allowdrop(event)',onclick='add(this)')
        div.square(id="15|"+n++,ondrop='drop(event)',ondragover='allowdrop(event)',onclick='add(this)')
        br
    div#currenttiles
    button(onclick='evaluate()') Evaluate
    button(onclick='clear()') Clear
      script.
        var check;
        var tilesplaced=[];
        var tileselected=[];
        var username='!{username}';
        var uroom=document.getElementById('uname');
        var upass=document.getElementById('upass');
        var socket=io.connect('http://localhost:3000');
        var content=document.getElementById('list').innerHTML;
        var playertiles=document.getElementById('currenttiles').innerHTML;
        content='asd';
        socket.emit('new user',username);
        var room=document.getElementById('rname');
        var password=document.getElementById('rpass');
        function addroom(){
        //  console.log('addroom');
          socket.emit('new room',{name:room.value,password:password.value,users:username});
        }
        socket.on('roomlist',function(data){
          if(data){
          var rooms=JSON.parse(data);
          //console.log(data);
          content='<ul>';
          for(var i=0;i<rooms.length;i++){
            content+='<li>'+rooms[i].name+"</li>";
          }
          content+="</ul>";
          }else{
          content='No room created yet';
          }
         //rs console.log(content);
          document.getElementById('list').innerHTML=content;
        })
        function EnterRoom(){
          console.log('enterroom');
           socket.emit('EnterRoom',{user:username,room:uroom.value,password:upass.value});
        }
        socket.on('Entered',function(data){
          console.log('Entered Socket');
          document.getElementById('Menu').style.display='none';
          document.getElementById('Board').style.display='inline-block';
          if(JSON.parse(data.room).users.length!=2){
            document.getElementById('warning').innerHTML='<p>Waiting For Ur Friend</p>';
          }else{
            console.log('else block');
            var tiles=JSON.parse(data.player).Current_7;
            playertiles="";
            for(var i=0;i<tiles.length;i++){
             playertiles+='<div draggable="true" class="playertiles" ondragstart="drag(event)" id="'+tiles[i].name+'||'+tiles[i].value+'>'+tiles[i].name+":"+tiles[i].value+"</div>";
            }
            console.log(playertiles);
            document.getElementById('currenttiles').innerHTML=playertiles;
          }
        })
        socket.on('Opponent Entered',function(data){
          var tiles=JSON.parse(data.player).Current_7;
          playertiles="";
            for(var i=0;i<tiles.length;i++){
             playertiles+='<div draggable="true" class="playertiles" ondragstart="drag(event)" id="'+tiles[i].name+'||'+tiles[i].value+'">'+tiles[i].name+":"+tiles[i].value+"</div>";
            }
      
            document.getElementById('currenttiles').innerHTML=playertiles;
        })
           function allowdrop(ev) {
           ev.preventDefault(); 
                }

          function drag(ev) {
               ev.dataTransfer.setData("text", ev.target.id);
              }
        function add(e){
          var arr=e.id.split('|');
          if(e.children.length!=0){
            var arrc=e.children[0].id.split(':');
            if(tileselected.length==0){
              e.style.backgroundcolor='#F0E7E5';
              tileselected.push({
                row:arr[1],
                column:arr[2],
                name:arrc[0],
                value:arrc[1]
              })
            }
            else{
            if(((tileselected[tileselected.length-1].row==arr[1])&&(tileselected[tileselected.length-2].row==arr[1]))||((tileselected[tileselected.length-1].column==arr[0])&&(tileselected[tileselected.length-2].row==arr[0]))){
              e.style.backgroundcolor='#F0E7E5';
              tileselected.push({
                row:arr[1],
                column:arr[2],
                name:arrc[0],
                value:arrc[1]
              })
            }
            
            }
          }
        }
        function drop(ev) {
          ev.preventDefault();
             var data = ev.dataTransfer.getData("text");
            ev.target.appendChild(document.getElementById(data));
            tilesplaced.push({
              squareid:ev.target.id,
              tilesid:data
            });
              }
        function evaluate(){
           let word='';
           for(let i=0;i<tileselected.length;i++){
             word+=tileselected[i].name;
           }
           var xhttp=new XMLHttpRequest();
           xhttp.onreadystatechange=function(){
             if(this.readyState==4 && this.status ==200){
               //console.log(this.responseText);
               check=this.responseText;
             } 
           };
           xhttp.open('POST','/check/'+word,true);
           xhttp.send();
           if(check==1){
            let sum=0;
            for(let i=0;i<tileselected.length;i++){
              sum+=tileselected[i].value;
            }
            socket.emit('score update',{score:sum,user:username,tilesused:tilesplaced.length,tileplacement:JSON.stringify(tilesplaced)});
            tilesplaced=[];
            nodrag();
            setTimeout(function(){ drag();},300000);
           }else{
             var ele;
             for(let i=0;i<tilesplaced.length;i++){
               ele=document.getElementById(tilesplaced[i].tilesid);
               document.getElementById('currenttiles').appendChild(ele);
               document.getElementById(tilesplaced[i].squareid).removeChild(document.getElementById(tilesplaced[i].squareid).childNodes[0]);
               document.getElementById('warning').innerHTML='Wrong Word.You Lost Your Turn';
               nodrag();
               setTimeout(function(){ drag();},300000);
               //socket implementation for change the turn
               
             }
           }
        }
        function nodrag(){
          var ele=document.getElementsByClassName('playertiles');
          for(let i=0;i<ele.length;i++){
            ele[i].draggable=false;
          }
        }
        function drag(){
          var ele=document.getElementsByClassName('playertiles');
          for(let i=0;i<ele.length;i++){
            ele[i].draggable=true;
          }
        }
        function clear(){
          for(var i=0;i<tileselected.length;i++){
            document.getElementById(tileselected[i].name+":"+tileselected[i].value).style.backgroundcolor='white';
          }
          tileselected=[];
        }
        socket.on('opponent update',function(data){
          let arr=JSON.parse(data.position);
          for(let i=0;i<arr.length;i++){
            let Div=document.createElement('DIV');
            Div.class='playertiles';
            Div.id=arr[i].tilesid;
            let values=arr[i].tilesid.split('||');
            Div.innerHTML=arr[0]+":"+arr[1];
            document.getElementById(arr[i].squareid).appendChild(Div);
          }
          drag();
        })
        socket.on('Game Over',function(data){
          if(JSON.parse(data.scores)[0]>JSON.parse(data.scores)[1]){
            alert('Game Over '+JSON.parse(data.usernames)[0]+'('+JSON.parse(data.scores)[0]+') defeated '+JSON.parse(data.usernames)[1]+'('+JSON.parse(data.scores)[1]+')')
          }else if (JSON.parse(data.scores)[1]>JSON.parse(data.scores)[0]){
           alert('Game Over '+JSON.parse(data.usernames)[1]+'('+JSON.parse(data.scores)[1]+') defeated '+JSON.parse(data.usernames)[0]+'('+JSON.parse(data.scores)[0]+')')
          }else{
            alert('Game Over Match Draw with score'+JSON.parse(data.scores)[0]);
          }
          
        })